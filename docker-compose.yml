services:
  frontend:
    build: ./frontend
    depends_on:
      - redis
      - db
      - worker
    ports:
      - "8000:8000"
    networks:
      - back-tier

  worker:
    build:
      context: ./worker
    depends_on:
      - redis
      - db
      - spark-master
      - kafka
    ports:
      - "5000:5000"
    networks:
      - back-tier

  redis:
    build: ./redis
    ports:
      - "6379:6379"
    networks:
      - back-tier

  db: 
    build: ./db
    ports:
      - "3306:3306"
    volumes: 
      - mysql_data:/var/lib/mysql  
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - back-tier  

  zookeeper:
    image: confluentinc/cp-zookeeper:latest  # Usa la imagen actualizada de Confluent
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_ZNODE_PARENT: /confluent
    networks:
      - back-tier
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 2181 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --list --bootstrap-server localhost:9092 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: >
      sh -c "/etc/confluent/docker/run &&
      sleep 10 &&
      kafka-topics --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic recomendacion &&
      tail -f /dev/null"
    networks:
      - back-tier
      
  spark-master:
    image: bitnami/spark:latest  # Cambia por la imagen que prefieras
    environment:
      - SPARK_MODE=master
    ports:
      - "7077:7077"
      - "8080:8080"
    networks:
      - back-tier


  spark-worker:
    image: bitnami/spark:latest
    depends_on:
      - spark-master
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
    networks:
      - back-tier

volumes: 
  mysql_data:

networks:
  back-tier:
    driver: bridge